/*
* #############################################################################
* This script file was partly generated by Grok AI, ChatGPT and then modified by the developer.
* https://grok.com/chat/46ba03db-75b4-4aa9-a76f-94a571ce3ba4?referrer=website
* https://chatgpt.com/share/67f14f8c-10b0-8002-80f4-f2efb826608e
* ##############################################################################
* */


document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('furniture-container')
    const addButton = document.getElementById('add-furniture')
    let index = 1 // Start at 1 since the initial fieldset uses 0

    // Add new furniture fieldset
    addButton.addEventListener('click', () => {
        const newFieldset = container.firstElementChild.cloneNode(true)

        // Update IDs and label 'for' attributes
        newFieldset.querySelectorAll('[id]').forEach(el => {
            el.id = el.id.replace('-0', `-${index}`)
        })
        newFieldset.querySelectorAll('label').forEach(label => {
            if (label.htmlFor) {
                label.htmlFor = label.htmlFor.replace('-0', `-${index}`)
            }
        })

        // Clear input values
        newFieldset.querySelectorAll('input').forEach(input => {
            input.value = ''
        })
        newFieldset.querySelectorAll('select').forEach(select => {
            select.selectedIndex = 0
        })

        // Append to container
        container.appendChild(newFieldset)
        index++
    })

    // Remove furniture fieldset with event delegation
    container.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-furniture')) {
            const fieldsets = container.querySelectorAll('fieldset')
            if (fieldsets.length > 1) {
                e.target.closest('fieldset').remove()
            }
        }
    })
})

async function fetchInsurances()
{
    try {
        const response = await fetch('/api/all-my-insurances')
        const insurances = await response.json()

        const select = document.getElementById('insurance')

        if (!Array.isArray(insurances)) {
            console.error('Invalid response format:', insurances)
            return
        }

        insurances.forEach(insurance => {
            const option = document.createElement('option')
            option.value = insurance.insurance_type
            option.textContent = `${insurance.insurance_type}-${insurance.insurance_id}`
            select.appendChild(option)
        })
    } catch (err) {
        console.error('Failed to load insurances:', err)
    }
}

fetchInsurances()

function getFurnitureData() {
    // Array to store furniture data
    const furnitureData = []

    // Select all furniture fieldsets in the form
    const fieldsets = document.querySelectorAll('#furniture-container fieldset')


    let allValid = true;

    // Check each furniture item's size input
    fieldsets.forEach((fieldset) => {
        const sizeInput = fieldset.querySelector('input[name="furniture[][size]"]');
        if (!validateDimensions(sizeInput.value)) {
            allValid = false;
            sizeInput.style.borderColor = 'red'; // Highlight the invalid field
            alert('Please enter dimensions in the correct format (e.g., 100x120x108)');
        } else {
            sizeInput.style.borderColor = ''; // Reset if valid
        }
    })
    if (!allValid)
        return
    // Iterate over each fieldset to collect data
    fieldsets.forEach((fieldset) => {
        // Get size input (e.g., "100x120x108") and calculate the sum of dimensions
        const sizeInput = fieldset.querySelector(`input[name="furniture[][size]"]`).value
        const dimensions = sizeInput.split('x').map(Number) // Split by 'x' and convert to numbers
        const dimensionsSum = dimensions.reduce((acc, val) => acc + val, 0) // Sum the dimensions

        // Get furniture type from the select element
        const furnitureType = fieldset.querySelector(`select[name="furniture[][type]"]`).value

        // Get material from the select element
        const material = fieldset.querySelector(`select[name="furniture[][material]"]`).value

        // Get insurance type (assuming a single insurance dropdown with id "insurance")
        // This is a placeholder adjust based on your actual form structure
        const insuranceSelect = document.getElementById('insurance')
        const insuranceValue = insuranceSelect ? insuranceSelect.value : 'basic' // Default to 'basic' if not found

        // Map insurance value to numeric type (0 = basic, 1 = advanced, 2 = full)
        const insuranceMap = {
            'basic': 0,
            'advanced': 1,
            'full': 2
        }
        const insuranceType = insuranceMap[insuranceValue] || 0 // Default to 0 if value not found

        // Create the furniture object with all required fields
        const furniture = {
            "dimensions": dimensionsSum,
            "is_leather": material === 'leather' ? 1 : 0,
            "is_fabric": material === 'fabric' ? 1 : 0,
            "is_none": material === 'none' ? 1 : 0,
            "is_table": furnitureType === 'table' ? 1 : 0,
            "is_sofa": furnitureType === 'sofa' ? 1 : 0,
            "is_chair": furnitureType === 'chair' ? 1 : 0,
            "insurance_type": insuranceType
        }

        // Add the furniture object to the array
        furnitureData.push(furniture)
    })

    // Return the array as a formatted JSON string
    return JSON.stringify(furnitureData, null, 2)
}

function validateDimensions(input) {
    const dimensions = input.split('x'); // Split the input by 'x'
    return !(dimensions.length !== 3 || dimensions.some(part => isNaN(part)));
}

document.querySelector('.insurance-form').addEventListener('submit', (e) => {
    e.preventDefault() // Prevent form submission for demonstration
    const jsonData = getFurnitureData()
    console.log(jsonData) // Output the JSON to the console
})
